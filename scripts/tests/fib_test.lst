// Fibonacci generator with stack
// thought i could, but never thought if i should

0x00: 66 B8 00 02         // MOV EAX 0x0200
0x04: 8E D8               // MOV DS, EAX
0x06: BA 00 00 00 00      // Move address into edx
0x0B: 8B 0A               // Read value into ECX
0x0D: C7 02 00 00 00 00   // Put 0 into mem location
0x13: 83 C2 04            // Add 4 to EDX
0x16: C7 02 01 00 00 00   // Put 1 in next mem location
0x1C: 83 C2 04            // Add 4 to EDX

// start actual program
0x1F: 8B 42 FC            // MOV EAX, [EDX - 4] Load previous result
0x22: 03 42 F8            // Add EAX, [EDX - 8]
0x25: 89 02               // Save to EDX
0x27: 83 C2 04            // Add 4 to EDX
0x2A: 83 C1 FF            // add ECX -1

0x2D: 75 F0 // JNE to halt

0x2F: EB 00 // JMP to loop

0x31: F4              // Halt


0x00002000: 08 00 00 00

// 0x00200000: // stack 